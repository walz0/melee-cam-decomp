void Camera_Target_Unk?(CameraMovement *movement, int param_2) {
  byte cam_type?;
  uint uVar1;
  bool bVar2;
  double dVar3;
  double dVar8;
  double dVar4;
  double in_f3;
  double dVar5;
  double dVar7;
  float fVar6;
  Vec local_90;
  Vec local_84;
  Vec local_78;
  Vec local_6c;
  Vec local_60;
  float zero;
  float zero2;
  float minus_1;
  Vec interest_delta?;
  
  uVar1 = 0;
  zero = 0.0;
  zero2 = 0.0;
                    /* get half of angle in radians for tan [was dVar7]*/
  half_fov = (movement->target_fov * deg2rad * 0.5);
  minus_1 = -1.0;
  VectorSubtract(&movement->target_interest,&movement->target_position,&interest_delta?);
  VectorNormalize(&interest_delta?);
  
  // get the vertical angle
  fov_vertical = atan2(interest_delta?.y,-interest_delta?.z);
  dVar5 = fov_vertical;

  dVar4 = -interest_delta?.z;

  // get the horizontal angle
  fov_horizontal = atan2(-interest_delta?.x,-interest_delta?.z);
  dVar3 = fov_horizontal;

  // set up vectors
  local_84 = {0, 0, -1};
  local_78 = {0, 0, -1};
  local_6c = {0, 0, -1};
  local_60 = {0, 0, -1};

                    /* horizontal angle, -interest_delta?.z,  */
  Vector_Rotate(half_fov, dVar4, in_f3, &local_60, 1);
  Vector_Rotate(half_fov, dVar4, in_f3, &local_60, 2);
  local_60.x = local_60.x * DefaultCameraCObjDesc.u.perspective.aspect;
  VectorNormalize(&local_60);
  Vector_Rotate(fov_vertical, dVar4, in_f3, &local_60, 1);
  Vector_Rotate(fov_horizontal, dVar4, in_f3, &local_60, 2);
  dVar4 = local_60.z;
  bVar2 = -0.001 <= dVar4;
  if (!bVar2) {
    fVar6 = (-(movement->target_position).z / dVar4);
    local_60.x = local_60.x * fVar6;
    local_60.y = local_60.y * fVar6;
    local_60.z = local_60.z * fVar6;
    VectorAdd(&local_60,&movement->target_position);
  }


  Vector_Rotate(dVar7,dVar4,in_f3,&local_6c,1);
  dVar8 = -dVar7;
  Vector_Rotate(dVar8,dVar4,in_f3,&local_6c,2);
  local_6c.x = local_6c.x * DefaultCameraCObjDesc.u.perspective.aspect;
  VectorNormalize(&local_6c);
  Vector_Rotate(dVar5,dVar4,in_f3,&local_6c,1);
  Vector_Rotate(dVar3,dVar4,in_f3,&local_6c,2);
  dVar4 = local_6c.z;
  if (-0.001 <= dVar4) {
    cam_type? = 0b00000010;
  }
  else {
    fVar6 = (-(movement->target_position).z / dVar4);
    local_6c.x = local_6c.x * fVar6;
    local_6c.y = local_6c.y * fVar6;
    local_6c.z = local_6c.z * fVar6;
    VectorAdd(&local_6c,&movement->target_position);
    cam_type? = bVar2;
  }


  Vector_Rotate(dVar8,dVar4,in_f3,&local_78,1);
  Vector_Rotate(dVar7,dVar4,in_f3,&local_78,2);
  local_78.x = local_78.x * DefaultCameraCObjDesc.u.perspective.aspect;
  VectorNormalize(&local_78);
  
  Vector_Rotate(dVar5,dVar4,in_f3,&local_78,1);
  Vector_Rotate(dVar3,dVar4,in_f3,&local_78,2);
  dVar4 = local_78.z;
  if (-0.001 <= dVar4) {
    cam_type? = cam_type? | 0b00000100;
  }
  else {
    fVar6 = (-(movement->target_position).z / dVar4);
    local_78.x = local_78.x * fVar6;
    local_78.y = local_78.y * fVar6;
    local_78.z = local_78.z * fVar6;
    VectorAdd(&local_78,&movement->target_position);
  }


  Vector_Rotate(dVar8,dVar4,in_f3,&local_84,1);
  Vector_Rotate(dVar8,dVar4,in_f3,&local_84,2);
  local_84.x = local_84.x * DefaultCameraCObjDesc.u.perspective.aspect;
  VectorNormalize(&local_84);
  Vector_Rotate(dVar5,dVar4,in_f3,&local_84,1);
  Vector_Rotate(dVar3,dVar4,in_f3,&local_84,2);
  if (-0.001 <= local_84.z) {
    cam_type? = cam_type? | 0b00001000;
  }
  else {
    fVar6 = -(movement->target_position).z / local_84.z;
    local_84.x = local_84.x * fVar6;
    local_84.y = local_84.y * fVar6;
    local_84.z = local_84.z * fVar6;
    VectorAdd(&local_84,&movement->target_position);
  }


  dVar5 = 0.0;
  dVar3 = dVar5;
  dVar4 = dVar5;
  dVar7 = dVar5;
  if (param_2 == 0) {
    if (!bVar2) {
      float cam_limit_left = Stage_GetCameraLimitLeft();
      if (local_60.x < cam_limit_left) {
        cam_limit_left = Stage_GetCameraLimitLeft();
        if (dVar7 < (cam_limit_left - local_60.x)) {
          uVar1 = 0b00000100;
          dVar7 = (cam_limit_left - local_60.x);
        }
      }
      cam_limit_top = Stage_GetCameraLimitTop();
      if (cam_limit_top < local_60.y) {
        cam_limit_top = Stage_GetCameraLimitTop();
        if ((cam_limit_top - local_60.y) < 0.0) {
          uVar1 = uVar1 | 0b00000001;
          dVar5 = (cam_limit_top - local_60.y);
        }
      }
    }
    if ((cam_type? & 0b00000010) == 0) {
      cam_limit_right = Stage_GetCameraLimitRight();
      if (cam_limit_right < local_6c.x) {
        cam_limit_right = Stage_GetCameraLimitRight();
        if ((cam_limit_right - local_6c.x) < 0.0) {
          uVar1 = uVar1 | 0b00001000;
          dVar3 = (cam_limit_right - local_6c.x);
        }
      }
      cam_limit_top = Stage_GetCameraLimitTop();
      if (cam_limit_top < local_6c.y) {
        cam_limit_top = Stage_GetCameraLimitTop();
        if ((cam_limit_top - local_6c.y) < 0.0) {
          uVar1 = uVar1 | 0b00000001;
          dVar5 = (cam_limit_top - local_6c.y);
        }
      }
    }
    if ((cam_type? & 0b00000100) == 0) {
      cam_limit_left = Stage_GetCameraLimitLeft();
      if (local_78.x < cam_limit_left) {
        cam_limit_left = Stage_GetCameraLimitLeft();
        if ((cam_limit_left - local_78.x) > 0.0) {
          uVar1 = uVar1 | 0b00000100;
          dVar7 = (cam_limit_left - local_78.x);
        }
      }
      cam_limit_bottom = Stage_GetCameraLimitBottom();
      if (local_78.y < dVar8) {
        cam_limit_bottom = Stage_GetCameraLimitBottom();
        if ((cam_limit_bottom - local_78.y) > 0.0) {
          uVar1 = uVar1 | 0b00000010;
          dVar4 = (cam_limit_bottom - local_78.y);
        }
      }
    }
    if ((cam_type? & 0b00001000) == 0) {
      cam_limit_right = Stage_GetCameraLimitRight();
      if (cam_limit_right < local_84.x) {
        cam_limit_right = Stage_GetCameraLimitRight();
        if ((cam_limit_right - local_84.x) < 0.0) {
          uVar1 = uVar1 | 0b00001000;
          dVar3 = (cam_limit_right - local_84.x);
        }
      }
      cam_limit_bottom = Stage_GetCameraLimitBottom();
      if (local_84.y < cam_limit_bottom) {
        cam_limit_bottom = Stage_GetCameraLimitBottom();
        if ((cam_limit_bottom - local_84.y) > 0.0) {
          uVar1 = uVar1 | 0b00000010;
          dVar4 = (cam_limit_bottom - local_84.y);
        }
      }
    }
  }
  else {
    if (!bVar2) {
      float leftBlastzone = Stage_GetLeftBlastzone();
      if (local_60.x < leftBlastzone) {
        leftBlastzone = Stage_GetLeftBlastzone();
        if ((leftBlastzone - local_60.x) > 0.0) {
          uVar1 = 0b00000100;
          dVar7 = (leftBlastzone - local_60.x);
        }
      }
      float topBlastzone = Stage_GetTopBlastzone();
      if (topBlastzone < local_60.y) {
        topBlastzone = Stage_GetTopBlastzone();
        if ((topBlastzone - local_60.y) < 0.0) {
          uVar1 = uVar1 | 0b00000001;
          dVar5 = (dVar8 - local_60.y);
        }
      }
    }
    if ((cam_type? & 0b00000010) == 0) {
      rightBlastzone = Stage_GetRightBlastzone();
      if (rightBlastzone < local_6c.x) {
        rightBlastzone = Stage_GetRightBlastzone();
        if ((rightBlastzone - local_6c.x) < 0.0) {
          uVar1 = uVar1 | 0b00001000;
          dVar3 = (rightBlastzone - local_6c.x);
        }
      }
      topBlastzone = Stage_GetTopBlastzone();
      if (topBlastzone < local_6c.y) {
        topBlastzone = Stage_GetTopBlastzone();
        if ((topBlastzone - local_6c.y) < 0.0) {
          uVar1 = uVar1 | 0b00000001;
          dVar5 = (topBlastzone - local_6c.y);
        }
      }
    }
    if ((cam_type? & 0b00000100) == 0) {
      leftBlastzone = Stage_GetLeftBlastzone();
      if (local_78.x < dVar8) {
        leftBlastzone = Stage_GetLeftBlastzone();
        if ((leftBlastzone - local_78.x) > 0.0) {
          uVar1 = uVar1 | 0b00000100;
          dVar7 = (leftBlastzone - local_78.x);
        }
      }
      bottomBlastzone = Stage_GetBottomBlastzone();
      if (local_78.y < bottomBlastzone) {
        bottomBlastzone = Stage_GetBottomBlastzone();
        if ((bottomBlastzone - local_78.y) > 0.0) {
          uVar1 = uVar1 | 0b00000010;
          dVar4 = (bottomBlastzone - local_78.y);
        }
      }
    }
    if ((cam_type? & 0b00001000) == 0) {
      rightBlastzone = Stage_GetRightBlastzone();
      if (rightBlastzone < local_84.x) {
        rightBlastzone = Stage_GetRightBlastzone();
        if ((rightBlastzone - local_84.x) < 0.0) {
          uVar1 = uVar1 | 0b00001000;
          dVar3 = (rightBlastzone - local_84.x);
        }
      }
      bottomBlastzone = Stage_GetBottomBlastzone();
      if (local_84.y < bottomBlastzone) {
        bottomBlastzone = Stage_GetBottomBlastzone();
        if ((bottomBlastzone - local_84.y) > 0.0) {
          uVar1 = uVar1 | 0b00000010;
          dVar4 = (bottomBlastzone - local_84.y);
        }
      }
    }
  }
  if (uVar1 != 0) {
    local_90.x = 0.0;
    local_90.y = 0.0;
    if (((uVar1 & 0b00000100) == 0) || ((uVar1 & 0b00001000) == 0)) {
      if ((uVar1 & 0b00000100) == 0) {
        if ((uVar1 & 0b00001000) != 0) {
          local_90.x = dVar3;
        }
      }
      else {
        local_90.x = dVar7;
      }
    }
    else {
      local_90.x = (dVar7 + dVar3) * 0.5;
    }
    if (((uVar1 & 0b00000001) == 0) || ((uVar1 & 0b00000010) == 0)) {
      if ((uVar1 & 0b00000001) == 0) {
        if ((uVar1 & 0b00000010) != 0) {
          local_90.y = dVar4;
        }
      }
      else {
        local_90.y = dVar5;
      }
    }
    else {
      local_90.y = (dVar4 + dVar5) * 0.5;
    }
    local_90.x = local_90.x * 1.0;
    local_90.y = local_90.y * 1.0;
    local_90.z = 0.0;
    VectorAdd(&movement->target_position,&local_90);
    VectorAdd(&movement->target_interest,&local_90);
  }
  return;
}
